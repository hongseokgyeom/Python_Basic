# 컬렉션 타입
# - 변수 하나에 값을 여러개 저장
# - 실질적으로 변수를 컬렉션 1개가 저장
# - *리스트(List), 투플(Tuple), *딕트(Dictionary), 세트(Set)

# 1. 리스트(List)
# - 시퀀스 자료형(연속 된 값을 저장)
# - 대괄호 사용[]
# - 정렬 가능
# - mutable(생성 된 후 변경 가능)
# - index 사용(slicing 가능)
# - packing 과 unpacking 가능
# - 멤버함수 : append(), extend(), insert(), remove(), pop(), index(), sorted() 등등
# 2차원 리스트는 표(table)과 동일한 형태

# 리스트 초기화(생성)
list_a = [1, 2, 3]
list_b = []
list_c = ["chosun", 98, 3.14, [1, 2, 3]]

print(list_c[1:3])  # 리스트 슬라이싱
print(list_c[0])  # 리스트 단일 값 추출
# 즉 문자열에서 쓰던 함수들 그대로 다 사용가능

#패킹과 언패킹
list_d = ["A", "B", "C"]  # 패킹
a, b, c = list_d # 언패킹

# a = list_d[0] -> Java, c

# append() : 마지막값에 추가
a = [1,2,3,4,5]
a.append(10)
print(a)

#insert() : 원하는 인덱스에 값 추가
a.insert(1,"A")  # 앞이 인덱스 뒤가 값
print(a)

# extend() : 리스트 확장 (list_a + list_b)
a = [1, 2, 3]
b = [3, 4, 5]
# a.append(b) -> [1, 2, 3, [3, 4, 5]] 즉, 리스트를 그냥 통으로 넣어버림
a.extend(b)  # a를 기준으로 병합 즉 a 가 123345 가 됨
print(a)

# 또는 그냥  print(a+b) 만 써도 됨

# remove() : 값으로 삭제
a = ["a", "b", "c"]
a.remove("b")
print(a)
# pop() : 인덱스로 삭제
b = ["a", "b", "c"]
c = b.pop(0)  # 값을 삭제 전 변수에 담아서 삭제 후 사용가능(선택사항)
print(b) # [b,c]
print(c) # [a, b, c]

# index() : 찾고자 하는 값의 인덱스 반환 tmi) ()안에 들어가는 값은 매개변수라고 함
a = [1, 2, 3]
print(a.index(3)) # 인덱스 반환 즉, 2 반환
# sort(), sorted() : 리스트 값 정렬
# - sort() : 원본 값 정렬
# - sorted() : 복제 한 값 정렬
a = [9, 3, 2, 1, 5, 8, 10]
b = sorted(a)  # 오름차순
c = sorted(a, reverse = True)  #내림차순
print(a)
print(b)
# 원본값을 잘 안바꾸기 때문에 보통 sorted 를 많이 씀 원본을 수정하는 경우는 극히 드뭄

